CREATE DATABASE join_db;
USE join_db;

CREATE TABLE customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(50)
);

CREATE TABLE orders (
	order_id INT PRIMARY KEY AUTO_INCREMENT,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016-02-10', 99.99, 1),
       ('2017-11-11', 35.50, 1),
       ('2014-12-12', 800.67, 2),
       ('2015-01-03', 12.50, 2),
       ('1999-04-11', 450.25, 5);
       
-- first name along with order
-- multiple ways to achieve it

SELECT id FROM customers WHERE last_name = 'George';
SELECT * FROM orders WHERE customer_id = 1;
 
 
SELECT * FROM orders 
WHERE customer_id = (SELECT id FROM customers WHERE last_name = 'George');
 
-- To perform a (kind of useless) cross join:
SELECT * FROM customers, orders;

-- INNER JOIN
SELECT * FROM customers
JOIN orders
	ON customers.id = orders.customer_id;  
    
-- INNER joins don't need specification but other joins does, INNER JOIN IS DEFAULT join
SELECT first_name, last_name, order_date, amount FROM customers
JOIN orders ON orders.customer_id = customers.id;

-- INNER JOIN WITH GROUP BY/ ORDER BY
SELECT 
    first_name, last_name, SUM(amount) AS total
FROM
    customers
        JOIN
    orders ON orders.customer_id = customers.id
GROUP BY first_name , last_name
ORDER BY total;


-- LEFT JOIN
SELECT first_name, last_name, order_date, amount
FROM customers
LEFT JOIN orders ON orders.customer_id = customers.id;


-- LEFT JOIN
SELECT 
    order_date, amount, first_name, last_name
FROM
    orders
        LEFT JOIN
    customers ON orders.customer_id = customers.id;
    
-- LEFT JOIN with GROUP BY
-- IFNULL(VAL, VALUE TO BE CONVERTED) {in this case, turns sum of amount to 0 if it turns out to be NULL)
SELECT first_name, last_name, IFNULL(SUM(amount), 0) AS money_spent FROM customers
LEFT JOIN 
	orders ON orders.customer_id = customers.id
    GROUP BY first_name, last_name;
    
    
-- RIGHT JOIN
SELECT 
    first_name, last_name, order_date, amount
FROM
    customers
        RIGHT JOIN
    orders ON customers.id = orders.customer_id;
    
-- CHALLENGE
-- Write a particular schema given in the question
CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100)
);

CREATE TABLE papers (
    student_id INT,
    title VARCHAR(100),
    grade INT,
    FOREIGN KEY (student_id)
        REFERENCES students (id)
        ON DELETE CASCADE
);

DROP TABLE papers;

 INSERT INTO students (first_name) VALUES 
('Caleb'), ('Samantha'), ('Raj'), ('Carlos'), ('Lisa');
 
INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);

SELECT * FROM students;
SELECT * FROM papers;

SELECT 
    first_name, title, grade
FROM
    students
        JOIN
    papers ON students.id = papers.student_id
ORDER BY grade DESC;

-- LEFT JOIN
SELECT first_name, title, grade
FROM
    students
        LEFT JOIN
    papers ON students.id = papers.student_id
ORDER BY grade DESC;

-- LEFT JOIN WITH IFNULL 
SELECT first_name, IFNULL(title, 'Missing'), IFNULL(grade, 0)
FROM
    students
        LEFT JOIN
    papers ON students.id = papers.student_id
ORDER BY grade DESC;

-- Display first_name and average (marks) as average and IFNULL to 0
SELECT first_name, AVG(grade) AS average, 
CASE
	WHEN IFNULL(avg(grade),0) <=75 THEN "LOSERS"
    ELSE 'PASSED'
END AS passing_status
FROM 
	students
		LEFT JOIN
        papers ON students.id = papers.student_id
GROUP BY first_name
ORDER BY average DESC;


-- ifnull avg(grade) to 0 AS average
SELECT first_name, IFNULL(AVG(grade), 0 ) AS average
FROM
	students
    LEFT JOIN
		papers on students.id = papers.student_id
GROUP BY first_name
ORDER BY average DESC;

