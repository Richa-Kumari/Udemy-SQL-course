CREATE DATABASE window_func;

USE window_func;

CREATE TABLE employees (
    emp_no INT PRIMARY KEY AUTO_INCREMENT,
    department VARCHAR(20),
    salary INT
);
 
INSERT INTO employees (department, salary) VALUES
('engineering', 80000),
('engineering', 69000),
('engineering', 70000),
('engineering', 103000),
('engineering', 67000),
('engineering', 89000),
('engineering', 91000),
('sales', 59000),
('sales', 70000),
('sales', 159000),
('sales', 72000),
('sales', 60000),
('sales', 61000),
('sales', 61000),
('customer service', 38000),
('customer service', 45000),
('customer service', 61000),
('customer service', 40000),
('customer service', 31000),
('customer service', 56000),
('customer service', 55000);


-- To understand window() functions we first need to understand their contrasting features with others, so...
-- an avg function
SELECT AVG(salary) FROM employees;
 -- this returns an average in one row
 
 -- OVER()
 SELECT AVG(salary) OVER() FROM employees;
 -- this also returns avg but does not collapse all other rows 
 
 -- OVER
SELECT 
    emp_no, 
    department, 
    salary, 
    MIN(salary) OVER(),
    MAX(salary) OVER()
FROM employees;


-- OVER(WITH PARTITION BY)
SELECT department, salary, AVG(salary) OVER(PARTITION BY department) 
	FROM employees;

-- company avg, dept avg using OVER() PARTITION BY
SELECT emp_no, department, salary, AVG(salary) OVER() AS company_avg, AVG(salary) OVER(PARTITION BY department) AS dept_avergae
FROM employees;
-- it's good for comparing data among columns

-- ORDER BY inside OVER()
-- ORDERS rows separated by department
SELECT 
	emp_no, 
	department, 
	salary,
	SUM(salary) OVER(PARTITION BY department ORDER BY salary) AS rolling_sum_salary,
	SUM(salary) OVER(PARTITION BY department) AS total_salary
FROM employees; 
	
-- behvaious change in MIN() due to ORDER BY()
SELECT 
    emp_no, 
    department, 
    salary, 
    MIN(salary) OVER(PARTITION BY department ORDER BY salary DESC) as rolling_min
FROM employees;

-- RANK()
SELECT 
	emp_no,
	department,
	salary,
	RANK() OVER(PARTITION BY department ORDER BY salary DESC) AS dept_rank,
    RANK() OVER(ORDER BY salary DESC) AS ranked_company
FROM employees;

-- DENSE_RANK() ROW_NUMBER()
-- DESNSE_RANK do not skip ranks if they are multiple in number as opposed to simple rank 
-- Row_number() just provides number of row
SELECT 
    emp_no, 
    department, 
    salary,
    ROW_NUMBER() OVER(PARTITION BY department ORDER BY SALARY DESC) as dept_row_number,
    RANK() OVER(PARTITION BY department ORDER BY SALARY DESC) as dept_salary_rank,
    RANK() OVER(ORDER BY salary DESC) as overall_rank,
    DENSE_RANK() OVER(ORDER BY salary DESC) as overall_dense_rank,
    ROW_NUMBER() OVER(ORDER BY salary DESC) as overall_num
FROM employees ORDER BY overall_rank;

-- NTILE() divides the data into specified number of tiles
SELECT 
    emp_no, 
    department, 
    salary,
    NTILE(4) OVER(PARTITION BY department ORDER BY salary DESC) AS dept_salary_quartile,
	NTILE(4) OVER(ORDER BY salary DESC) AS salary_quartile
FROM employees;

-- FIRST_VALUE() 
SELECT 
    emp_no, 
    department, 
    salary,
    FIRST_VALUE(emp_no) OVER(PARTITION BY department ORDER BY salary DESC) as highest_paid_dept,
    FIRST_VALUE(emp_no) OVER(ORDER BY salary DESC) as highest_paid_overall
FROM employees;


-- LEAD() & LAG()
SELECT 
    emp_no, 
    department, 
    salary,
    salary - LAG(salary) OVER(ORDER BY salary DESC) as salary_diff
FROM employees;
 
SELECT 
    emp_no, 
    department, 
    salary,
    salary - LAG(salary) OVER(PARTITION BY department ORDER BY salary DESC) as dept_salary_diff
FROM employees;
